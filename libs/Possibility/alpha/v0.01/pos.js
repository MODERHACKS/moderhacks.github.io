/* *Possibility *Alpha-0.01 *By Debarchito Nath (c) 2020 | ALL RIGHTS RESERVED *Relased Under The MIT License Which Can Be Found At - https://moderhacks.github.io/LICENSE.md */ window.Possibility = window.Pos = function(ins) { "use strict"; if(ins === undefined) ins = {}; if(ins.el === undefined) ins.el = "script"; if(ins.type === undefined) ins.type = "text/possibility"; if(ins.def === undefined) ins.def = {}; if(ins.def.type === undefined) ins.def.type = {}; document.querySelector("head").innerHTML += "<style id='Possibility-CSS-Out'></style>\n"; var el = document.querySelectorAll(ins.el + "[type='" + ins.type + "']"); for(var i = 0; i < el.length; ++i) { var sc = document.createElement("script"); sc.id = "Possibility-Output"; sc.innerHTML += _possibility(_possibility(el[i].innerHTML)); document.querySelector("head").appendChild(sc); document.querySelector("body").removeChild(el[i]); document.querySelector("hear").removeChild(el[i]) }; function _fit(val) { val = val.replace(/^\s*\n/gm, "").replace(/\s/gm, ""); if(val === "") { return true } else { return false } }; function _possibility(val) { return val.replace(/\.add\(([\S\s]*?)<style>([\S\s]*?)<\/style>([\S\s]*?)\)/, function(_, a, b, c) { if(_fit(a) === true && _fit(c) === true) { b = b.replace(/"/gm, '\\"'); b = '"' + b.trim().replace(/\n/gm, '" + "\\n') + '"'; b = b.replace(/\{\{(.*?)\}\}/gm, function(m, g1) { return '" + ' + g1 + ' + "' }).replace(/\$(\w+)/gm, function(m, g1) { return '" + ' + g1 + ' + "' }); return ".add(" + b.replace(/undefined/, "").replace(/^\s*\n/gm, "") + ")" } else { console.log("Possibility-ErrorLog | Faced difficulties when parsing the stylesheet via Possibility.CSS(), probably restricted characters are in use !") } }).replace(/<jsx>([\S\s]*?)<\/jsx>/gm, function(_, a) { a = a.trim().replace(/^\s*\n/gm, "").replace(/"/gm, '\\"'); a = '"' + a.replace(/\n/gm, '" + "\\n') + '"'; return a }).replace(/^\s*\n/gm, "") } }; Possibility.ELEMENT = function() { this.create = function(el, ins) { if(ins === undefined) { ins = {} }; var a = document.createElement(el); if(ins instanceof Object) { if(ins.parent === undefined) { ins.parent = "body" }; if(ins.html === undefined) { ins.html === "" }; if(ins.text === undefined) { ins.text === "" }; if(ins.val === undefined) { ins.val = "" }; if (el === "input") { a.value = ins.val } else { if(typeof ins.html === "string" && ins.html.trim() !== "") { a.innerHTML = ins.html } else if(typeof ins.text === "string" && ins.text.trim() !== "") { a.innerText = ins.text } }; document.getElementsByTagName(ins.parent)[0].appendChild(a); Object.entries(ins.attr).forEach(function (_ref) { var _ref2 = Possibility.sliced(_ref, 2), key = _ref2[0], val = _ref2[1]; if ( typeof val === 'object') { Possibility.assign(a[key], val); } else { a[key] = val; }; }); return a; } else if(typeof ins === "string") { if(el === "input") { a.value = ins } else { a.innerHTML = ins }; document.getElementsByTagName("body")[0].appendChild(a) } }; this.push = this.inject = function(html, ins) { if(ins === undefined) { ins = {} }; if(ins.parent === undefined) { ins.parent = "body" }; if(ins.overwrite === undefined) { ins.overwrite = false }; if(ins.type === undefined) { ins.type = "html" }; if(ins.overwrite === false) { if(ins.type === "html") { document.querySelector(ins.parent).innerHTML += html } else if(ins.type === "text") { document.querySelector(ins.parent).innerText += html } else { console.log("Possibility-ErrorLog | '" + ins.type + "' is not a registered type for Possibility.ELEMENT().push() !") } } else { if(ins.type === "html") { document.querySelector(ins.parent).innerHTML = html } else if(ins.type === "text") { document.querySelector(ins.parent).innerText = html } else { console.log("Possibility-ErrorLog | '" + ins.type + "' is not a registered type for Possibility.ELEMENT().push() !") }}}}; Possibility.STYLESHEET = function() { this.add = function(a) { document.querySelector("#Possibility-CSS-Out").innerHTML += a } }; Possibility.TEMPLATE = function() { this.create = this.register = function(id, ins) { if(id === undefined) { id = "[possibility Create Unknown-ID-SEQ]"; console.log("Possibility-ErrorLog | Can't create a template without you defining the identity sequence !") }; if(ins === undefined) { ins = {} }; if(ins.template === undefined) { console.log("Possibility-ErrorLog | Can't create a template with the identity sequence '" + id + "' without you defining the template !") }; if(id !== "[possibility Create Unknown-ID-SEQ]") { var temp = document.createElement("script"); temp.type = "text/possibility-template"; temp.setAttribute("possibility-id-seq", id); temp.innerHTML += ins.template; document.querySelector("body").appendChild(temp) }; }; this.render = function(id, ins) { if(id === undefined) { id = "[possibility Render Unknown-ID-SEQ]"; console.log("Possibility-ErrorLog | Can't render a template without you defining the identity sequence !") }; if(ins === undefined) { ins = {} }; if(ins.data === undefined) { ins.data = {} }; if(ins.type === undefined) { ins.type = "text" } if(id !== "[possibility Render Unknown-ID-SEQ]") { var all = document.querySelectorAll("script[possibility-id-seq='" + id + "']"); for(var i = 0; i < all.length; ++i) { if(ins.type === "text") { document.querySelector("body").innerText += _parse(_parse(all[i].innerHTML)) }; if(ins.type === "html") { document.querySelector("body").innerHTML += _parse(_parse(all[i].innerHTML)) }; if(ins.type === "css") { document.querySelector("#Possibility-CSS-Out").innerHTML += _parse(_parse(all[i].innerHTML)) } }; function _parse(val) { return Possibility.vex(val).replace(/@\{(.*?)\}/gm, function(_, a) { var fin = {}; if(a.includes("*")) { var sp = a.split("*"); fin.a = "ins.data." + sp[0].trim(); fin.b = eval(fin.a).repeat(eval(sp[1].trim())) || _ } else { fin.b = eval("ins.data." + a.trim()) || _ }; return fin.b || _ }).replace(/\$(\w+)/gm, function(m,g1) { return ins.data[g1.trim()] || m }) }}}}; Possibility.AJAX = function() { this.get = function(url, ins) { if(!ins.async) { ins.async = true }; if(window.XMLHttpRequest) { var request = new XMLHttpRequest() } else { request = new ActiveXObject("Microsoft.XMLHTTP") }; request.open('GET', url, ins.async); request.onreadystatechange = function() { if (this.readyState === 4) { if (this.status >= 200 && this.status < 400) { if(ins.before) { var rVar0 = ins.before; rVar0() }; var rVar1 = ins.success; rVar1(this.responseText); if(ins.after) { var rVar2 = ins.after; rVar2() } } else { var rVar2 = ins.error; rVar2() } } }; request.send(); request = null }; this.post = function(url, ins) { if(!ins.async) { ins.async = true }; if(!ins.contentType) { ins.contentType = "application/x-www-form-urlencoded" }; if(!ins.charset) { ins.charset = "UTF-8" }; if(window.XMLHttpRequest) { var request = new XMLHttpRequest() } else { request = new ActiveXObject("Microsoft.XMLHTTP") }; request.open('POST', url, ins.async); request.setRequestHeader('Content-Type', ins.contentType + "; charset=" + ins.charset); request.send(ins.data) }}; Possibility.antistr = function(obj) { return new Function("'use strict'; return (" + obj + ")")() }; Possibility.vex = Possibility.variableExecutor = function(str) { return str.replace(/\{\{(.*?)\}\}/gm, function(_, a) { if(a.includes("*")) { var sp = a.split("*"); return Possibility.antistr(sp[0].trim()).repeat(eval(sp[1].trim())) } else { return eval(a.trim()) } }) }; Possibility.render = function (template, elem, ins) { if(ins === undefined) { ins = {} }; template = Possibility.vex(template); if (typeof template === 'function') { template.elem = elem }; elem = typeof elem === 'string' ? document.querySelector(elem) : elem; if (!elem) return; template = (typeof template === 'function' ? template(template.state) : template); if (typeof template !== 'string') return; if (elem.innerHTML === template) return; elem.innerHTML = template; if (typeof window.CustomEvent === 'function') { var event = new CustomEvent('render', { bubbles: true }); elem.dispatchEvent(event) }; return elem }; Possibility.assign = function(target) { for (var i = 1; i < arguments.length; ++i) { var source = arguments[i]; for (var key in source) { if(source.hasOwnProperty(key)) { target[key] = source[key]; }; }; }; return target; };  Possibility.arrayWithHoles = function(arr) { if (Array.isArray(arr)) return arr; }; Possibility.sliced = function(arr, i) { return Possibility.arrayWithHoles(arr) || Possibility.iterableToArrayLimit(arr, i); }; Possibility.iterableToArrayLimit = function(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }; Possibility.antistring = function(val) { return new Function("'use strict'; return (" + val + ")")() }; Possibility.instanceof = function(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }; Possibility.classCallCheck = function(instance, Constructor) { if (!Possibility.instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }; Possibility.defineProperties = function(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }; Possibility.createClass = function(Constructor, protoProps, staticProps) { if (protoProps) Possibility.defineProperties(Constructor.prototype, protoProps); if (staticProps) Possibility.defineProperties(Constructor, staticProps); return Constructor; }; if (!String.prototype.includes) { String.prototype.includes = function(search, start) { if (search instanceof RegExp) { throw TypeError('First argument must not be a RegExp') }; if (start === undefined) { start = 0 }; return this.indexOf(search, start) !== -1 } }; // End
