window.Color = function(id) {
 var el = document.querySelectorAll(id)
 document.querySelector("head").innerHTML += "<style id='Color-Styles'>color-keyword { color: #ff5c5c; font-weight: bold; } color-semikey { color: #C66400; } color-string { color: #27B35D; } color-ml { margin-left: 0.6px; margin-right: 0.6px; } color-comment { color: green } color-proto { color: #690060; } color-protot { color: #00066D; } color-string > color-keyword, color-string > color-semikey, color-string > color-comment, color-comment > color-string, color-string > color-function, color-comment > color-function, color-comment > color-keyword, color-comment > color-semikey, color-comment > color-proto, color-comment > color-protot, color-string > color-proto, color-string > color-protot, color-proto > color-keyword, color-proto > color-semikey, color-comment > color-inject, color-comment > color-string > color-inject, color-comment > color-third, color-string > color-third, color-comment > color-number, color-string > color-number, color-comment > color-pipe, color-string > color-pipe { font-weight: inherit; color: inherit; } color-inject { color: steelblue; } color-function { color: #ff5c5c; } color-third { color: #A28900; } color-number { color: #007797; } color-pipe { color: #5400AE; }</style>"
 for(var i = 0; i < el.length; ++i) {
  el[i].innerHTML = el[i].innerHTML.replace(/</gm, "&lt;").replace(/>/gm, "&gt;").replace(/##([\S\s]*?)##/gm, function(_, a) { return "<color-comment>##" + a + "</color-comment>##" }).replace(/#(.*?)\n/gm, function(_, a) { return "<color-comment>#" + a + "</color-comment>\n" }).replace(/([a-z\d_-]+)\(/gim, "<color-function>$1</color-function>(").replace(/([a-z\d_-]+)\[/gim, "<color-third>$1</color-third>[").replace(/\(/gm, "<color-ml>(</color-ml>").replace(/\)/gm, "<color-ml>)</color-ml>").replace(/\b(keyword|package|self|this|int|str|num|float|double|list|set|dictionary|tuple|true|false|True|False|platelets|void|any|new|num|null|undefined|NaN|None|json|program|pipe|gate|antistr|func|phase|default)\b/gm, "<color-semikey>$&</color-semikey>").replace(/&lt\;\$([\S\s]*?)\$&gt\;/gm, function(_, a) { return "<color-inject>&lt;\$" + a + "\$&gt;</color-inject>" }).replace(/(\\n|\\s|\\t)/gm, function(_, a) { return "<color-inject>" + a + "</color-inject>" }).replace(/(r|f|l)"(.*?)"/gm, function(_, b, a) { return '<color-string>' + b + '"' + a + '"</color-string>' }).replace(/"(.*?)\\"/gm, function(_, a) { return '<color-string>"' + a + '\\"</color-string>' }).replace(/\\"(.*?)"/gm, function(_, a) { return '<color-string>\\"' + a + '"</color-string>' }).replace(/"(.*?)"/gm, function(_, a) { return '<color-string>"' + a + '"</color-string>' }).replace(/(r|f|l)'(.*?)'/gm, function(_, b, a) { return "<color-string>" + b + "'" + a + "'</color-string>" }).replace(/'(.*?)\\'/gm, function(_, a) { return "<color-string>'" + a + "\\'</color-string>" }).replace(/\\'(.*?)'/gm, function(_, a) { return "<color-string>\\'" + a + "'</color-string>" }).replace(/'(.*?)'/gm, function(_, a) { return "<color-string>'" + a + "'</color-string>" }).replace(/`([\S\s]*?)\\`/gm, function(_, a) { return "<color-string>`" + a + "\\`</color-string>" }).replace(/\\`([\S\s]*?)`/gm, function(_, a) { return "<color-string>\\`" + a + "`</color-string>" }).replace(/`([\S\s]*?)`/gm, function(_, a) { return "<color-string>`" + a + "`</color-string>" }).replace(/\:\:(\w+)/gm, function(_, a) { return "<color-proto>::" + a + "</color-proto>" }).replace(/\.\.\.(\w+)/gm, function(_, a) { return "<color-protot>..." + a + "</color-protot>" }).replace(/\b(import|export|from|def|pass|continue|break|enum|typeof|interface|if|elif|else|const|let|create|reccur|do|while|with|for|when|then|syntax|mainframe|minify|print|echo|println|in|as|only|gets|spm|virtual|static|global|local|init|class|once|use|namespace|lambda|defs|return|and|or|await|del|async|assert|raise|nonlocal|not|try|switch|case|finally|is|yeild|extends|impliments|point|goto|absolute|relative|grid|declare|stream|manipulate|define|SiromeLang|saveas)\b/gm, "<color-keyword>$&</color-keyword>").replace(/(1|2|3|4|5|6|7|8|9|0)/gm, "<color-number>$&</color-number>" ).replace(/__(.*?)__/gm, function(_, a) { if(a.charAt(0) !== "" && a.charAt(a.length - 1) !== "") { return "<color-pipe>__" + a + "__</color-pipe>" } else { return _ } })
  el[i].style.cssText += "font-size: 0.9em; color: #646464; font-family: sans-serif; background: #F4F4F4; padding: 10px; border-radius: 8px; overflow-x: scroll; line-height: 20px;"
 }
}
